#!/bin/bash

BACKUP_DIR="/var/backups/db"  # Đường dẫn thư mục sao lưu
MYSQL_USER="root"              # Tên người dùng MySQL
MYSQL_PASSWORD=""              # Mật khẩu MySQL
DATE=$(date +%F)               # Định dạng ngày (ví dụ: 2024-11-26)
DAY_OF_WEEK=$(date +%u)        # Ngày trong tuần (1 = Thứ 2, 7 = Chủ nhật)
export MYSQL_PWD=$MYSQL_PASSWORD

# Tạo thư mục sao lưu nếu không có
mkdir -p $BACKUP_DIR/daily || { echo "Failed to create daily backup directory"; exit 1; }
mkdir -p $BACKUP_DIR/weekly || { echo "Failed to create weekly backup directory"; exit 1; }
mkdir -p $BACKUP_DIR/monthly || { echo "Failed to create monthly backup directory"; exit 1; }

# Lấy danh sách tất cả các cơ sở dữ liệu, loại trừ mysql, information_schema, performance_schema, sys
DATABASES=$(mysql -u$MYSQL_USER -e "SHOW DATABASES;" | grep -Ev "(Database|mysql|information_schema|performance_schema|sys)")

# Kiểm tra nếu không có cơ sở dữ liệu sao lưu
if [ -z "$DATABASES" ]; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') - No databases found to backup." >>"$BACKUP_DIR/backup_log_$DATE.log"
  exit 1
fi

# Tạo danh sách các file sao lưu thành công và lỗi
SUCCESSFUL_BACKUPS=""
FAILED_BACKUPS=""
ATTACHMENT_FILES=""

# Hàm sao lưu hàng ngày
backup_daily() {
  for DB in $DATABASES; do
    BACKUP_FILE="$DATE"_"$DB.sql.gz"
    # Sao lưu cơ sở dữ liệu và nén vào tệp .sql.gz
    if mysqldump -u$MYSQL_USER $DB | gzip >$BACKUP_DIR/daily/$BACKUP_FILE; then
      SUCCESSFUL_BACKUPS="$SUCCESSFUL_BACKUPS\n$BACKUP_FILE"
      ATTACHMENT_FILES="$ATTACHMENT_FILES $BACKUP_DIR/daily/$BACKUP_FILE"  # Thêm vào danh sách các tệp đính kèm
    else
      FAILED_BACKUPS="$FAILED_BACKUPS\n$DB - Daily backup failed"
      echo "$(date +'%Y-%m-%d %H:%M:%S') - Backup failed for database: $DB" >>"$BACKUP_DIR/backup_log_$DATE.log"
    fi
  done
}

# Hàm sao lưu hàng tuần
backup_weekly() {
  for DB in $DATABASES; do
    BACKUP_FILE="$DATE"_"$DB.sql.gz"
    # Sao lưu cơ sở dữ liệu và nén vào tệp .sql.gz
    if mysqldump -u$MYSQL_USER $DB | gzip >$BACKUP_DIR/weekly/$BACKUP_FILE; then
      SUCCESSFUL_BACKUPS="$SUCCESSFUL_BACKUPS\n$BACKUP_FILE"
    else
      FAILED_BACKUPS="$FAILED_BACKUPS\n$DB - Weekly backup failed"
      echo "$(date +'%Y-%m-%d %H:%M:%S') - Backup failed for database: $DB" >>"$BACKUP_DIR/backup_log_$DATE.log"
    fi
  done
}

# Hàm sao lưu hàng tháng
backup_monthly() {
  for DB in $DATABASES; do
    BACKUP_FILE="$DATE"_"$DB.sql.gz"
    # Sao lưu cơ sở dữ liệu và nén vào tệp .sql.gz
    if mysqldump -u$MYSQL_USER $DB | gzip >$BACKUP_DIR/monthly/$BACKUP_FILE; then
      SUCCESSFUL_BACKUPS="$SUCCESSFUL_BACKUPS\n$BACKUP_FILE"
    else
      FAILED_BACKUPS="$FAILED_BACKUPS\n$DB - Monthly backup failed"
      echo "$(date +'%Y-%m-%d %H:%M:%S') - Backup failed for database: $DB" >>"$BACKUP_DIR/backup_log_$DATE.log"
    fi
  done
}

# Hàm xoá bản sao lưu cũ (giữ tối đa 30 bản sao lưu)
cleanup_old_backups() {
  # Xoá bản sao lưu cũ hơn 30 ngày (hàng ngày)
  if [ "$(ls -A $BACKUP_DIR/daily)" ]; then
    find $BACKUP_DIR/daily/* -type f -mtime +30 -exec echo "$(date +'%Y-%m-%d %H:%M:%S') - Deleting old backup: {}" >>"$BACKUP_DIR/backup_log_$DATE.log" \; -exec rm -f {} \;
  fi

  # Xoá bản sao lưu cũ hơn 12 tuần (hàng tuần)
  if [ "$(ls -A $BACKUP_DIR/weekly)" ]; then
    find $BACKUP_DIR/weekly/* -type f -mtime +84 -exec echo "$(date +'%Y-%m-%d %H:%M:%S') - Deleting old backup: {}" >>"$BACKUP_DIR/backup_log_$DATE.log" \; -exec rm -f {} \; # 12 tuần = 84 ngày
  fi

  # Xoá bản sao lưu cũ hơn 12 tháng (hàng tháng)
  if [ "$(ls -A $BACKUP_DIR/monthly)" ]; then
    find $BACKUP_DIR/monthly/* -type f -mtime +365 -exec echo "$(date +'%Y-%m-%d %H:%M:%S') - Deleting old backup: {}" >>"$BACKUP_DIR/backup_log_$DATE.log" \; -exec rm -f {} \; # 12 tháng = 365 ngày
  fi
}

# Gọi các hàm sao lưu
backup_daily  # Sao lưu hàng ngày
if [ "$DAY_OF_WEEK" -eq 1 ]; then # Nếu là ngày đầu tuần (thứ 2), sao lưu hàng tuần
  backup_weekly
fi

if [ "$DAY_OF_WEEK" -eq 1 ] && [ "$(date +%d)" -eq 01 ]; then # Nếu là ngày đầu tháng và ngày đầu tuần, sao lưu hàng tháng
  backup_monthly
fi

# Gọi hàm dọn dẹp bản sao lưu cũ
cleanup_old_backups

# Kiểm tra nếu không có cơ sở dữ liệu sao lưu lỗi, thay bằng "No failed backups"
if [ -z "$FAILED_BACKUPS" ]; then
  FAILED_BACKUPS="No failed backups"
fi

# Kiểm tra các dịch vụ email
EMAIL_SERVICE_INSTALLED=false
is_installed() {
  command -v "$1" >/dev/null 2>&1
}

if is_installed sendmail || is_installed exim4 || is_installed postfix; then
  EMAIL_SERVICE_INSTALLED=true
fi

# Kiểm tra /etc/mailname
if [ -f /etc/mailname ]; then
  email_domain=$(cat /etc/mailname)
else
  email_domain=$(hostname -f 2>/dev/null || hostname)
fi

EMAIL_OPTION="no_email"
EMAIL_FROM="no-reply@$email_domain"
EMAIL_TO=""
SENDER_NAME="Admin"
SUBJECT="MySQL Backup Report - $DATE"
BODY="Hello,\n\nPlease find attached the MySQL backup files for $DATE.\n\nSuccessful backups:\n$SUCCESSFUL_BACKUPS\n\nFailed backups:\n$FAILED_BACKUPS\n\nBest regards,\nMySQL Backup Script"
LOG_FILE="$BACKUP_DIR/backup_log_$DATE.log"

# Gửi email dựa trên EMAIL_OPTION
if [ "$EMAIL_OPTION" = "no_email" ]; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') - Email notifications are disabled." >>"$LOG_FILE"
  exit 0
elif [ -z "${EMAIL_FROM}" ] || [ -z "${EMAIL_TO}" ]; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') - Email configuration skipped (EMAIL_FROM or EMAIL_TO is empty)." >>"$LOG_FILE"
  exit 0
elif ! $EMAIL_SERVICE_INSTALLED; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') - No email service installed (sendmail, exim4, postfix, etc.). Email not sent." >>"$LOG_FILE"
  exit 0
fi

# Kiểm tra nếu tệp đính kèm được yêu cầu nhưng không có tệp
if [ "$EMAIL_OPTION" = "attachments" ] && [ -z "$ATTACHMENT_FILES" ]; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') - No valid attachment files. Email not sent." >>"$LOG_FILE"
  exit 0
fi

# Hàm kiểm tra lệnh mail có hỗ trợ tùy chọn -A hay không
supports_mail_attach() {
  test_file=$(mktemp)
  echo "Test file for attachment" >"$test_file"
  echo "Test" | mail -A "$test_file" -s "Test Subject" "root@localhost" >/dev/null 2>&1
  local result=$?
  rm -f "$test_file"
  return $result
}

# Xây dựng danh sách file đính kèm
ATTACHMENTS=""
for file in $ATTACHMENT_FILES; do
  if [ -f "$file" ]; then
    ATTACHMENTS="$ATTACHMENTS -A $file"
  else
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Attachment file not found: $file" >>"$LOG_FILE"
  fi
done

# Gửi email dựa trên EMAIL_OPTION
if [ "$EMAIL_OPTION" = "attachments" ]; then
  # Gửi email với file đính kèm nếu lệnh mail hỗ trợ -A
  if supports_mail_attach; then
    if [ -n "$ATTACHMENTS" ]; then
      echo -e "$BODY" | mail -s "$SUBJECT" -a "From: $EMAIL_FROM" $ATTACHMENTS $EMAIL_TO
      echo "$(date +'%Y-%m-%d %H:%M:%S') - Email sent with all attachments." >>"$LOG_FILE"
    else
      echo "$(date +'%Y-%m-%d %H:%M:%S') - No valid attachments found. Email not sent." >>"$LOG_FILE"
    fi
  elif is_installed mutt; then
    echo -e "$BODY" | mutt -s "$SUBJECT" -e "set from=\"$SENDER_NAME <$EMAIL_FROM>\"" -a $ATTACHMENT_FILES -- "$EMAIL_TO"
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Email sent with attachments using mutt." >>"$LOG_FILE"
  else
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Neither mail -A nor mutt available. Email not sent." >>"$LOG_FILE"
  fi
elif [ "$EMAIL_OPTION" = "no_attachments" ]; then
  # Gửi email không đính kèm
  echo -e "$BODY" | mail -s "$SUBJECT" -a "From: $EMAIL_FROM" "$EMAIL_TO"
  echo "$(date +'%Y-%m-%d %H:%M:%S') - Email sent without attachments." >>"$LOG_FILE"
fi
