#!/bin/bash

# Đọc cấu hình chính từ mysqlbackup.cnf
CONFIG_DIR="/etc/automysqlbackup/"
CONFIG_FILE="${CONFIG_DIR}mysqlbackup.cnf"
# Gửi email hoặc đính kèm ATTACHMENT_FILES
CONFIG_MAIL="${CONFIG_DIR}sendmail"


if [ ! -f "$CONFIG_FILE" ]; then
  echo "Configuration file not found: $CONFIG_FILE"
  exit 1
fi

# Load cấu hình mysqlbackup.cnf
source "$CONFIG_FILE"

# Tạo thư mục Sao lưu
mkdir -p $BACKUP_DIR

# Định nghĩa các biến phụ thuộc
DATE=$(date +%d-%m-%Y)
DAY_NAME=$(date +%A)
DAY_OF_WEEK=$(date +%u)  # Ngày trong tuần (1 = Thứ 2, 7 = Chủ nhật)
LOG_FILE="$BACKUP_DIR/backup_log_$DATE.log"

# Lấy sử dụng mật khẩu SQL
export MYSQL_PWD=$MYSQL_PASSWORD

# Lấy danh sách database cần sao lưu
DATABASES=$(mysql -u$MYSQL_USER -e "SHOW DATABASES;" | grep -Ev "(Database|$CONFIG_DB_EXCLUDE)")

# Hàm ghi log và hiển thị ra terminal
log_notice() {
  local message=$1
  echo "$message"           # Hiển thị ra terminal
  echo -e "$message" >>"$LOG_FILE"  # Ghi vào log file
}

# Dự đoán dung lượng cần sao lưu
WARNING=0
TOTAL_BACKUP_SIZE_MB=0
FREE_DISK_SPACE=0
check_backup_disk_space() {
  for DB in $DATABASES; do
    TABLE_SIZES=$(mysql -u$MYSQL_USER $DB -e "SHOW TABLE STATUS;" | awk '{sum += $7} END {print sum}')
    TOTAL_BACKUP_SIZE=$((TOTAL_BACKUP_SIZE + TABLE_SIZES))
  done

  # Chuyển đổi từ KB sang MB
  TOTAL_BACKUP_SIZE_MB=$((TOTAL_BACKUP_SIZE / 1024 / 1024))

  # Tính nén gz 10% 20% 30% 40% 50% 60% 70% 80%
  PERCENTAGE=87
  TOTAL_BACKUP_SIZE_MB=$((TOTAL_BACKUP_SIZE_MB - (TOTAL_BACKUP_SIZE_MB * PERCENTAGE / 100)))

  # Đo dung lượng trống còn lại trên ổ
  FREE_DISK_SPACE=$(df -BG "$BACKUP_DIR" | grep -v Filesystem | awk '{print $4}' | tr -d 'G')

  # Chuyển đổi từ GB sang MB
  FREE_DISK_SPACE_MB=$((FREE_DISK_SPACE * 1024))

  # So sánh và thực hiện hành động nếu cần
  if [ $TOTAL_BACKUP_SIZE_MB -gt $FREE_DISK_SPACE_MB ]; then
    echo "WARNING: Disk full, not enough space to backup database."
    # Gửi email cảnh báo hoặc làm các hành động khác
    echo "$(date +'%Y-%m-%d %H:%M:%S') - WARNING: Disk full, not enough space to backup database." >>"$LOG_FILE"
    # Gửi email hoặc đính kèm ATTACHMENT_FILES
    if [ -f "$CONFIG_MAIL" ]; then
      WARNING=1
      source "$CONFIG_MAIL"
    else
      log_notice ""
      log_notice "Mail not sent because the configuration file could not be found: $CONFIG_MAIL"
    fi
    exit 1
  fi
}

check_backup_disk_space

# End test

if [ -z "$DATABASES" ]; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') - No databases found to backup." >>"$LOG_FILE"
  exit 1
fi

# Tạo thư mục và ghi log
for dir in daily weekly monthly; do
  mkdir -p "$BACKUP_DIR/$dir" 2>>"$LOG_FILE" || {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Failed to create $dir backup directory" >>"$LOG_FILE"
    exit 1
  }
done

SUCCESSFUL_BACKUPS=""
FAILED_BACKUPS=""

# Tạo danh sách file đính kèm để gửi mail
ATTACHMENT_FILES=""

# Hàm sao lưu
backup_databases() {
  local backup_dir=$1  # Thư mục sao lưu (daily, weekly, monthly)
  local backup_type=$2 # Loại sao lưu (Daily, Weekly, Monthly)

  echo "Database Backup on $(date +'%Y-%m-%d') - Initiating..."
  echo ""
  echo "" >>"$LOG_FILE"
  echo "=== Auto Backup SQL  $(date +'%Y-%m-%d') ======================================" >>"$LOG_FILE"

  for DB in $DATABASES; do
    # Tạo thư mục riêng cho từng database
    DB_BACKUP_DIR="$backup_dir/$DB"
    mkdir -p "$DB_BACKUP_DIR"

    BACKUP_FILE="$DB_BACKUP_DIR/${DATE}_${DB}_${DAY_NAME}.sql.gz"
    if mysqldump -u$MYSQL_USER $DB | gzip >"$BACKUP_FILE"; then
      # Kiểm tra kích thước file để phát hiện lỗi
      if [ -s "$BACKUP_FILE" ]; then
        SUCCESSFUL_BACKUPS="$SUCCESSFUL_BACKUPS\n[$backup_type] $BACKUP_FILE"
        # Chỉ thêm tệp sao lưu của ngày hiện tại vào danh sách đính kèm
        if [[ "$backup_type" == "Daily" && "$backup_dir" == "$BACKUP_DIR/daily" ]]; then
          ATTACHMENT_FILES="$ATTACHMENT_FILES $BACKUP_FILE"
        fi
        echo "$(date +'%H:%M:%S') - [$backup_type] $DB -> $BACKUP_FILE"
        echo "$(date +'%Y-%m-%d %H:%M:%S') - [$backup_type] $DB -> $BACKUP_FILE" >>"$LOG_FILE"
      else
        FAILED_BACKUPS="$FAILED_BACKUPS\n[$backup_type] $DB - Empty backup file"
        echo "$(date +'%Y-%m-%d %H:%M:%S') - [$backup_type] Backup failed for database: $DB (empty file)" >>"$LOG_FILE"
        rm -f "$BACKUP_FILE"
      fi
    else
      FAILED_BACKUPS="$FAILED_BACKUPS\n[$backup_type] $DB - Backup failed"
      echo "$(date +'%Y-%m-%d %H:%M:%S') - [$backup_type] Backup failed for database: $DB" >>"$LOG_FILE"
    fi
  done
}

# Sao lưu hàng ngày
backup_databases "$BACKUP_DIR/daily" "Daily"

# Sao lưu hàng tuần (chỉ vào thứ 7)
if [ "$DAY_OF_WEEK" -eq 6 ]; then
  backup_databases "$BACKUP_DIR/weekly" "Weekly"
fi

# Sao lưu hàng tháng (chỉ vào ngày cuối cùng của tháng)
# Tính toán ngày cuối cùng của tháng
LAST_DAY_OF_MONTH=$(date -d "$(date +%Y-%m-01) +1 month -1 day" +%d)
if [ "$(date +%d)" -eq "$LAST_DAY_OF_MONTH" ]; then
  backup_databases "$BACKUP_DIR/monthly" "Monthly"
fi

# Hàm xử lý theo ngày, tuần, tháng
cleanup_old_backups() {
  local dir=$1
  local days=$2

  # Lấy danh sách các tệp có ngày chỉnh sửa lớn hơn $days
  local old_files=$(find "$dir" -type f -mtime +$days)

  if [ -n "$old_files" ]; then
    echo "" >> "$LOG_FILE"
    echo "$old_files" >> "$LOG_FILE"
    find "$dir" -type f -mtime +$days -exec rm -v {} \;
  else
    echo "No old data found to clean in $dir."
    echo "$(date +'%Y-%m-%d %H:%M:%S') - No old data found to clean in $dir." >> "$LOG_FILE"
  fi
}

# Hàm xoá bản sao lưu cũ theo ngày, tuần, tháng
cleanup_old_backups_by_time() {
  local dir=$1
  local days=$2

  CLEAN_NOTICE="Cleanup old files: $dir (older than $days days)"

  echo ""
  echo $CLEAN_NOTICE

  echo "" >> "$LOG_FILE"
  echo $CLEAN_NOTICE >> "$LOG_FILE"

  cleanup_old_backups "$dir" "$days"
}

# Cleanup files older than 30 days in daily backup
cleanup_old_backups_by_time "$BACKUP_DIR/daily" 30

# Cleanup files older than 84 days in weekly backup
cleanup_old_backups_by_time "$BACKUP_DIR/weekly" 84

# Cleanup files older than 365 days in monthly backup
cleanup_old_backups_by_time "$BACKUP_DIR/monthly" 365

echo ""
echo "Log written to: $LOG_FILE"

# Đặt quyền cho thư mục sao lưu
if [ -n "$BACKUP_DIR" ] && [ "$BACKUP_DIR" = "/var/backups/db" ] && [ -d "$BACKUP_DIR" ]; then
    chown -R root:root /var/backups/db*
    find /var/backups/db/* -type f -exec chmod 400 {} \;
    find /var/backups/db/* -type d -exec chmod 700 {} \;
fi

# Tóm tắt kết quả
TOTAL_DATABASES=$(echo "$DATABASES" | wc -l)
TOTAL_SUCCESS=$(echo -e "$SUCCESSFUL_BACKUPS" | grep -c ".sql.gz")
TOTAL_FAILED=$(echo -e "$FAILED_BACKUPS" | grep -c "Backup failed")

# Hiển thị và ghi log
log_notice ""
log_notice "Summary:"
log_notice "$(date +'%Y-%m-%d %H:%M:%S') - Total databases: $TOTAL_DATABASES"
log_notice "$(date +'%Y-%m-%d %H:%M:%S') - Successful backups: $TOTAL_SUCCESS"
log_notice "$(date +'%Y-%m-%d %H:%M:%S') - Failed backups: $TOTAL_FAILED"
log_notice "$(date +'%Y-%m-%d %H:%M:%S') - Total backup size: ${TOTAL_BACKUP_SIZE_MB}MB"
log_notice "$(date +'%Y-%m-%d %H:%M:%S') - Remaining disk space: $((FREE_DISK_SPACE_MB - TOTAL_BACKUP_SIZE_MB))MB"

# Gửi email hoặc đính kèm ATTACHMENT_FILES
if [ -f "$CONFIG_MAIL" ]; then
  source "$CONFIG_MAIL"
else
  log_notice ""
  log_notice "Mail not sent because the configuration file could not be found: $CONFIG_MAIL"
fi

